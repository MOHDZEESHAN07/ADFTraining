{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Zeeshan"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/hollywoodmovies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "hollywoodmoviecsv",
								"type": "DatasetReference"
							},
							"name": "hollywoodmoviescsv"
						},
						{
							"dataset": {
								"referenceName": "hollywoodmoviesdb",
								"type": "DatasetReference"
							},
							"name": "hollywoodmoviesdbcsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "hollywoodoutput",
								"type": "DatasetReference"
							},
							"name": "hollywoodoutput"
						}
					],
					"transformations": [
						{
							"name": "hollywoodmoviejoins"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> hollywoodmoviescsv",
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> hollywoodmoviesdbcsv",
						"hollywoodmoviescsv, hollywoodmoviesdbcsv join(hollywoodmoviescsv@Column_1 == hollywoodmoviesdbcsv@Column_1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> hollywoodmoviejoins",
						"hollywoodmoviejoins select(mapColumn(",
						"          Column_1 = hollywoodmoviescsv@Column_1,",
						"          Column_2 = hollywoodmoviescsv@Column_2,",
						"          Column_3 = hollywoodmoviescsv@Column_3,",
						"          Column_1 = hollywoodmoviesdbcsv@Column_1,",
						"          Column_2 = hollywoodmoviesdbcsv@Column_2,",
						"          Column_3 = hollywoodmoviesdbcsv@Column_3,",
						"          Column_4,",
						"          Column_5,",
						"          Column_6",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> hollywoodoutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesds')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movies",
								"type": "DatasetReference"
							},
							"name": "movies"
						},
						{
							"dataset": {
								"referenceName": "moviesDB",
								"type": "DatasetReference"
							},
							"name": "moviesdb"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "moviesout",
								"type": "DatasetReference"
							},
							"name": "moviesop",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorageinput",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "moviesclean"
						},
						{
							"name": "joinmovies"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movieId as string,",
						"          title as string,",
						"          genres as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> movies",
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          RottenTomato as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> moviesdb",
						"movies derive(titlenew = toString(left(title,length(title)-6))) ~> moviesclean",
						"moviesclean, moviesdb join(movies@title == moviesdb@title,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmovies",
						"joinmovies select(mapColumn(",
						"          movieId,",
						"          genres = movies@genres,",
						"          titlenew,",
						"          movie,",
						"          title = moviesdb@title,",
						"          genres = moviesdb@genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> moviesop"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scdtype1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customersource",
								"type": "DatasetReference"
							},
							"name": "customersource"
						},
						{
							"dataset": {
								"referenceName": "dimcustomer",
								"type": "DatasetReference"
							},
							"name": "dimcustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dimcustomer",
								"type": "DatasetReference"
							},
							"name": "sinktarget"
						}
					],
					"transformations": [
						{
							"name": "createhashkey"
						},
						{
							"name": "Exists"
						},
						{
							"name": "lookupcustomerid"
						},
						{
							"name": "setdata"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> customersource",
						"source(output(",
						"          CustomerID as integer,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          InsertedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          HashKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimcustomer",
						"customersource derive(hashkey = sha2(256, iifNull(Title,'') +iifNull(FirstName,'') +iifNull(MiddleName,'') +iifNull(LastName,'') +iifNull(Suffix,'') +iifNull(CompanyName,'') +iifNull(SalesPerson,'') +iifNull(EmailAddress,'') +iifNull(Phone,''))) ~> createhashkey",
						"createhashkey, dimcustomer exists(createhashkey@hashkey == dimcustomer@HashKey,",
						"     negate:true,",
						"     broadcast: 'auto')~> Exists",
						"Exists, dimcustomer lookup(customersource@CustomerID == dimcustomer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupcustomerid",
						"lookupcustomerid derive(insertdate = iif(isNull(InsertedDate), currentTimestamp(), InsertedDate),",
						"          modifieddate = currentTimestamp()) ~> setdata",
						"setdata alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          InsertedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          HashKey as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinktarget"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_scdtype1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "scd1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scdtype1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customersource": {},
									"dimcustomer": {},
									"sinktarget": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scdtype1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_agg_derive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_agg_derive",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_agg_derive",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"moviesv1": {},
									"moviesclean": {},
									"moviescountbyyear": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}