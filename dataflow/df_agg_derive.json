{
	"name": "df_agg_derive",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "moviesv1"
				}
			],
			"sinks": [
				{
					"name": "moviesclean",
					"rejectedDataLinkedService": {
						"referenceName": "output",
						"type": "LinkedServiceReference"
					}
				},
				{
					"name": "moviescountbyyear",
					"rejectedDataLinkedService": {
						"referenceName": "output",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "extractyeartitle"
				},
				{
					"name": "Ratingbyyear"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> moviesv1",
				"moviesv1 derive(year = toInteger(trim(right(title,6),'()')),",
				"          title = toString(left(title,length(title)-6))) ~> extractyeartitle",
				"extractyeartitle aggregate(groupBy(year),",
				"     AvgRating = count(year)) ~> Ratingbyyear",
				"extractyeartitle sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['movie111'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'output',",
				"     partitionBy('hash', 1)) ~> moviesclean",
				"Ratingbyyear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['moviecountbyyear'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> moviescountbyyear"
			]
		}
	}
}