{
	"name": "scdtype1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "customersource",
						"type": "DatasetReference"
					},
					"name": "customersource"
				},
				{
					"dataset": {
						"referenceName": "dimcustomer",
						"type": "DatasetReference"
					},
					"name": "dimcustomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dimcustomer",
						"type": "DatasetReference"
					},
					"name": "sinktarget"
				}
			],
			"transformations": [
				{
					"name": "createhashkey"
				},
				{
					"name": "Exists"
				},
				{
					"name": "lookupcustomerid"
				},
				{
					"name": "setdata"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> customersource",
				"source(output(",
				"          CustomerID as integer,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          InsertedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          HashKey as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimcustomer",
				"customersource derive(hashkey = sha2(256, iifNull(Title,'') +iifNull(FirstName,'') +iifNull(MiddleName,'') +iifNull(LastName,'') +iifNull(Suffix,'') +iifNull(CompanyName,'') +iifNull(SalesPerson,'') +iifNull(EmailAddress,'') +iifNull(Phone,''))) ~> createhashkey",
				"createhashkey, dimcustomer exists(createhashkey@hashkey == dimcustomer@HashKey,",
				"     negate:true,",
				"     broadcast: 'auto')~> Exists",
				"Exists, dimcustomer lookup(customersource@CustomerID == dimcustomer@CustomerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupcustomerid",
				"lookupcustomerid derive(insertdate = iif(isNull(InsertedDate), currentTimestamp(), InsertedDate),",
				"          modifieddate = currentTimestamp()) ~> setdata",
				"setdata alterRow(upsertIf(true())) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          InsertedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          HashKey as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinktarget"
			]
		}
	}
}