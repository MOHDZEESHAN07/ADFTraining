{
	"name": "movies1_2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "movies",
						"type": "DatasetReference"
					},
					"name": "movies1"
				},
				{
					"dataset": {
						"referenceName": "moviesDB",
						"type": "DatasetReference"
					},
					"name": "moviesdb"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "moviesout",
						"type": "DatasetReference"
					},
					"name": "moviesoutputnew",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorageinput",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "moviesjoin"
				},
				{
					"name": "moviesoutput"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> movies1",
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          RottenTomato as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> moviesdb",
				"movies1, moviesdb join(movieId == movie,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> moviesjoin",
				"moviesjoin select(mapColumn(",
				"          movieId,",
				"          title = movies1@title,",
				"          genres = movies1@genres,",
				"          movie,",
				"          title = moviesdb@title,",
				"          genres = moviesdb@genres,",
				"          year,",
				"          Rating,",
				"          RottenTomato",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> moviesoutput",
				"moviesoutput sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> moviesoutputnew"
			]
		}
	}
}